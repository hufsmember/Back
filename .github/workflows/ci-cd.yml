
name: CI-CD

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 코드를 가져와요
        uses: actions/checkout@v3

      - name: Gradle 캐싱 처리
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 자바 버전을 설정해요
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build and Test with Gradle
        run: ./gradlew build --parallel -x test
        shell: bash
        
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker(도커에서 이미지에 대한 메타 데이터를 추출해요)
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}

      - name: Build and push Docker image(도커를 빌드하고 푸시해요)
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DB_URL=${{ secrets.DB_URL }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}

      - name: connect ssh to ec2 and run docker
        uses: appleboy/ssh-action@master
        with:
          key: ${{secrets.EC2_PEM}}
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          script: |
            docker stop my-container || true
            docker rm my-container || true
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:main
            docker run --name my-container \
            -e "DATABASE_URL=${{ secrets.DB_URL }}" \
            -e "DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            -e "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" \
            -e "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" \
            -e "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" \
            -e "JWT_ACCESS_TOKEN_SECRET_KEY=${{ secrets.JWT_ACCESS_TOKEN_SECRET_KEY }}" \
            -e "JWT_ACCESS_TOKEN_EXPIRED_TIME=${{ secrets.JWT_ACCESS_TOKEN_EXPIRED_TIME }}" \
            -p 80:8080 -d ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:main
            sleep 60

            
            
        
